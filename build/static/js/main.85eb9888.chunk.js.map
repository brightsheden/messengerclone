{"version":3,"sources":["Messages.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Messages","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","App","useState","input","setInput","messages","setMesssages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","FormControl","Input","value","onChange","event","target","placeholder","IconButton","disabled","type","onClick","e","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"oVA4BeA,G,MAtBEC,sBAAW,WAAoBC,GAAS,IAA3BC,EAA0B,EAA1BA,QACpBC,EAD8C,EAAlBC,WACNF,EAAQE,SACpC,OACI,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,iBAC3C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAQ,mBAAoB,qBACzC,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACAC,MAAM,SACNC,QAAQ,KACRC,UAAU,OACNR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,KAJH,IAIyDF,EAAQA,gB,QCKtEU,G,MAhBKC,IAASC,cAAc,CAEnCC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,4DACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,aACnBC,MAAO,4CAMQC,a,QCkDRC,MA5Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEoBF,mBAAS,IAF7B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNpB,EAHM,KAGIyB,EAHJ,KA+Bb,OAzBAC,qBAAU,WAERlB,EAAGmB,WAAW,YACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVN,EAAaM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAGD,EAAIC,GAAIpC,QAAQmC,EAAIE,iBAEjE,IAEFT,qBAAU,WACRD,EAAaW,OAAO,uBACpB,IAeA,yBAAKnC,UAAU,OACb,yBAAKoC,IAAI,+GACX,yCACA,uCAAarC,GACb,0BAAMC,UAAU,aACd,kBAACqC,EAAA,EAAD,CAAarC,UAAU,oBAErB,kBAACsC,EAAA,EAAD,CAAOC,MAAOnB,EAAOoB,SAAU,SAAAC,GAAK,OAAGpB,EAASoB,EAAMC,OAAOH,QAAQvC,UAAU,YAAY2C,YAAY,uBACvG,kBAACC,EAAA,EAAD,CAAY5C,UAAU,iBAAiB6C,UAAWzB,EAAOf,QAAQ,YAAYD,MAAM,UAAU0C,KAAK,SAASC,QAtB3F,SAACC,GACrBA,EAAEC,iBACF1C,EAAGmB,WAAW,YAAYwB,IAAI,CAC5BrD,QAAQuB,EACRrB,SAASA,EACToD,UAAW3C,IAASS,UAAUmC,WAAWC,oBAI3ChC,EAAS,MAcH,kBAAC,IAAD,SAOP,kBAAC,IAAD,KAEKC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAGpC,EAAL,EAAKA,QAAL,OAEX,kBAAC,EAAD,CAAUyD,IAAKrB,EAAIlC,SAAUA,EAAUF,QAASA,UCjDtC0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3E,c","file":"static/js/main.85eb9888.chunk.js","sourcesContent":["// @flow strict\r\n\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React,{forwardRef} from 'react';\r\nimport './message.css'\r\n\r\nconst  Messages= forwardRef(({message,username},ref ) =>{\r\n    const isUser = username === message.username\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message_user'}`}>\r\n            <Card className={isUser? 'message_userCard': \"message_guestCard\" }>\r\n                <CardContent>\r\n                    <Typography\r\n                    color=\"intial\"\r\n                    variant='h5'\r\n                    component='h2'\r\n                    >{ !isUser && `${message.username || 'unknown user'}:`} {message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n       \r\n        </div>\r\n         \r\n          \r\n        \r\n    );\r\n});\r\n\r\nexport default Messages;","import firebase from 'firebase/app'\r\nimport  'firebase/firestore'\r\n\r\n//import * as firebase from 'firebase'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n   \r\n        apiKey: \"AIzaSyDCQ76_3DqjyPpUOwICFmQxtGfwqBptO2Q\",\r\n        authDomain: \"messenger-clone-68194.firebaseapp.com\",\r\n        databaseURL: \"https://messenger-clone-68194-default-rtdb.firebaseio.com\",\r\n        projectId: \"messenger-clone-68194\",\r\n        storageBucket: \"messenger-clone-68194.appspot.com\",\r\n        messagingSenderId: \"9786761871\",\r\n        appId: \"1:9786761871:web:4643343b806e9a5da846fa\"\r\n \r\n      \r\n\r\n})\r\n\r\nconst db = firebaseApp.firestore()\r\n\r\nexport default db","import React,{useEffect, useState} from 'react';\nimport { Button ,Input,FormControl,InputLabel,IconButton} from '@material-ui/core';\nimport FlipMove from 'react-flip-move';\nimport {MdSend} from 'react-icons/md'\nimport './App.css';\nimport Messages from './Messages';\nimport db from './firebase'\nimport firebase from 'firebase'\n\nfunction App() {\n  const [input, setInput] = useState(\"\")\n  const [messages, setMesssages] = useState([])\n  const [username, setUsername] = useState(\"\")\n\n\n  useEffect(()=>{\n    //getting data from firebase database\n    db.collection(\"messages\")\n    .orderBy('timestamp', 'desc')\n    .onSnapshot(snapshot =>{\n      setMesssages(snapshot.docs.map(doc => ({id:doc.id, message:doc.data()})))\n    })\n  },[])\n\n  useEffect(()=>{\n    setUsername (prompt(\"eneter your name\"))\n  },[])\n  const handleSubmit  = (e)=>{\n    e.preventDefault()\n    db.collection('messages').add({\n      message:input,\n      username:username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n\n    })\n    //setMesssages([...messages,{username:username, message:input}])\n    setInput(\"\")\n  }\n  \n  //console.log(messages)\n  return (\n    <div className=\"App\">\n      <img src=\"https://th.bing.com/th/id/R.aa8382125b3e2f5d536b4b52786aefe8?rik=FVu6bDKtdZEFww&pid=ImgRaw&r=0?w=100&h=100\"/>\n    <h1>Messenger</h1>\n    <h2>welcome {username}</h2>\n    <form className='app__form'>\n      <FormControl className='app__formControl'>\n       \n        <Input value={input} onChange={event =>setInput(event.target.value)} className=\"app-input\" placeholder='enter your message' />\n        <IconButton className='app-iconButton' disabled={!input} variant=\"contained\" color=\"primary\" type='submit' onClick={handleSubmit} >\n          <MdSend/>\n        </IconButton>\n      </FormControl> \n  \n    \n    </form>\n   \n   <FlipMove>\n      {\n        messages.map(({id,message}) =>(\n          \n          <Messages key={id} username={username} message={message}/>\n        ))}\n   </FlipMove>\n   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}